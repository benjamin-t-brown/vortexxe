rm -rf dist
arm-linux-gnueabihf-g++ -DMIYOOA30 -O3 -I. -std=c++17 -Wall -Wno-psabi $SDL_INCLUDE -o VORTEXXE $MARCH $SDL_LIBS $SDL_LIB_PATHS -Wl,-verbose main.cpp LibHTML.cpp game/GameManager.cpp client/Render.cpp client/Ui.cpp client/ProgressBar.cpp   lib/hiscore/hiscore.cpp lib/sdl2wrapper/Animation.cpp lib/sdl2wrapper/AssetLoader.cpp lib/sdl2wrapper/Events.cpp lib/sdl2wrapper/SDL2Includes.cpp lib/sdl2wrapper/Sprite.cpp lib/sdl2wrapper/Store.cpp lib/sdl2wrapper/Window.cpp lib/sdl2wrapper/Timer.cpp lib/sdl2wrapper/Gauge.cpp lib/sdl2wrapper/Transform.cpp lib/sdl2wrapper/Logger.cpp lib/sdl2wrapper/Localization.cpp 
In file included from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
[01m[K./lib/minijsoncpp/minijsoncpp.h:241:102:[m[K [01;31m[Kerror: [m[K'[01m[Kminjson::detail::RawBaseValueType<T>[m[K' is not a template [[01;31m[K-fpermissive[m[K]
     decltype(std::visit(std::declval<F&&>(), std::declval<T&&>().detail::template RawBaseValueType<T>[01;31m[K::[m[Kvariant()))>
                                                                                                      [01;31m[K^~[m[K
[01m[K./lib/minijsoncpp/minijsoncpp.h:[m[K In function '[01m[Kstd::enable_if_t<is_base_of_v<decltype (minjson::detail::GetValue(declval<typename std::remove_cv<typename std::remove_reference<_Dp>::type>::type>())), typename std::remove_cv<typename std::remove_reference<_Dp>::type>::type>, decltype (std::visit(declval<F&&>(), declval<T&&>().decltype (minjson::detail::GetValue(declval<typename std::remove_cv<typename std::remove_reference<_Dp>::type>::type>()))::variant()))> minjson::visit(F&&, T&&)[m[K':
[01m[K./lib/minijsoncpp/minijsoncpp.h:243:102:[m[K [01;31m[Kerror: [m[K'[01m[Kminjson::detail::RawBaseValueType<T>[m[K' is not a template [[01;31m[K-fpermissive[m[K]
     return std::visit(std::forward<F>(f), std::forward<T>(value).detail::template RawBaseValueType<T>[01;31m[K::[m[Kvariant());
                                                                                                      [01;31m[K^~[m[K
[01m[K./lib/minijsoncpp/minijsoncpp.h:[m[K In member function '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseNumber(minjson::detail::ParserImpl<Allocator>::Variant&)[m[K':
[01m[K./lib/minijsoncpp/minijsoncpp.h:1391:62:[m[K [01;31m[Kerror: [m[Kno matching function for call to '[01m[Kfrom_chars(const char* const&, const char*&, double&)[m[K'
         const auto result = std::from_chars(begin, i, decimal[01;31m[K)[m[K;
                                                              [01;31m[K^[m[K
In file included from [01m[K./lib/minijsoncpp/minijsoncpp.h:10[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/charconv:593:5:[m[K [01;36m[Knote: [m[Kcandidate: '[01m[Ktemplate<class _Tp> std::__detail::__integer_from_chars_result_type<_Tp> std::from_chars(const char*, const char*, _Tp&, int)[m[K'
     [01;36m[Kfrom_chars[m[K(const char* __first, const char* __last, _Tp& __value,
     [01;36m[K^~~~~~~~~~[m[K
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/charconv:593:5:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/move.h:55[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_pair.h:59[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_algobase.h:64[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/char_traits.h:39[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/string:40[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:15[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
/usr/arm-linux-gnueabihf/include/c++/8/type_traits: In instantiation of '[01m[Kstruct std::is_trivially_destructible<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2872:25:[m[K   required from '[01m[Kconstexpr const bool std::is_trivially_destructible_v<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:313:5:[m[K   required from '[01m[Kconstexpr const bool std::__detail::__variant::_Traits<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >::_S_trivial_dtor[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:321:20:[m[K   required from '[01m[Kconstexpr const bool std::__detail::__variant::_Traits<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >::_S_trivial_move_assign[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:635:16:[m[K   required by substitution of '[01m[Ktemplate<class ... _Types> using _Move_assign_alias = std::__detail::__variant::_Move_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_assign, _Types ...> [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:638:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Variant_base<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1026:11:[m[K   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/ext/aligned_buffer.h:91:28:[m[K   required from '[01m[Kstruct __gnu_cxx::__aligned_buffer<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:234:43:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node_value_base<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:265:12:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:2027:49:[m[K   required from '[01m[Kstruct std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:173:11:[m[K   required from '[01m[Kclass std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:105:18:[m[K   required from '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1271:12:[m[K [01;31m[Kerror: [m[Kinvalid use of incomplete type '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
     struct [01;31m[Kis_trivially_destructible[m[K
            [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/unordered_map:47[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:16[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:102:11:[m[K [01;36m[Knote: [m[Kdeclaration of '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
     class [01;36m[Kunordered_map[m[K
           [01;36m[K^~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/move.h:55[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_pair.h:59[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_algobase.h:64[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/char_traits.h:39[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/string:40[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:15[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
/usr/arm-linux-gnueabihf/include/c++/8/type_traits: In instantiation of '[01m[Kconstexpr const bool std::is_trivially_destructible_v<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:313:5:[m[K   required from '[01m[Kconstexpr const bool std::__detail::__variant::_Traits<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >::_S_trivial_dtor[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:321:20:[m[K   required from '[01m[Kconstexpr const bool std::__detail::__variant::_Traits<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >::_S_trivial_move_assign[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:635:16:[m[K   required by substitution of '[01m[Ktemplate<class ... _Types> using _Move_assign_alias = std::__detail::__variant::_Move_assign_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_assign, _Types ...> [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:638:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Variant_base<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1026:11:[m[K   required from '[01m[Kclass std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1354:45:[m[K   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/ext/aligned_buffer.h:91:28:[m[K   required from '[01m[Kstruct __gnu_cxx::__aligned_buffer<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:234:43:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node_value_base<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:265:12:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:2027:49:[m[K   required from '[01m[Kstruct std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:173:11:[m[K   required from '[01m[Kclass std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:105:18:[m[K   required from '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2872:25:[m[K [01;31m[Kerror: [m[K'[01m[Kvalue[m[K' is not a member of '[01m[Kstd::is_trivially_destructible<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
   inline constexpr bool [01;31m[Kis_trivially_destructible_v[m[K =
                         [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
/usr/arm-linux-gnueabihf/include/c++/8/type_traits: In instantiation of '[01m[Kstruct std::__is_trivially_move_constructible_impl<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >, true>[m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1217:12:[m[K   required from '[01m[Kstruct std::is_trivially_move_constructible<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2860:25:[m[K   required from '[01m[Kconstexpr const bool std::is_trivially_move_constructible_v<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:317:5:[m[K   required from '[01m[Kconstexpr const bool std::__detail::__variant::_Traits<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >::_S_trivial_move_ctor[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:543:70:[m[K   required by substitution of '[01m[Ktemplate<class ... _Types> using _Move_ctor_alias = std::__detail::__variant::_Move_ctor_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_ctor, _Types ...> [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:546:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Copy_assign_base<false, std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:592:12:[m[K   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/ext/aligned_buffer.h:91:28:[m[K   required from '[01m[Kstruct __gnu_cxx::__aligned_buffer<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:234:43:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node_value_base<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:265:12:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:2027:49:[m[K   required from '[01m[Kstruct std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:173:11:[m[K   required from '[01m[Kclass std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:105:18:[m[K   required from '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1210:12:[m[K [01;31m[Kerror: [m[Kinvalid use of incomplete type '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
     struct [01;31m[K__is_trivially_move_constructible_impl<_Tp, true>[m[K
            [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/unordered_map:47[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:16[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:102:11:[m[K [01;36m[Knote: [m[Kdeclaration of '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
     class [01;36m[Kunordered_map[m[K
           [01;36m[K^~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/move.h:55[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_pair.h:59[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_algobase.h:64[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/char_traits.h:39[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/string:40[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:15[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
/usr/arm-linux-gnueabihf/include/c++/8/type_traits: In instantiation of '[01m[Kconstexpr const bool std::is_trivially_move_constructible_v<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:317:5:[m[K   required from '[01m[Kconstexpr const bool std::__detail::__variant::_Traits<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >::_S_trivial_move_ctor[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:543:70:[m[K   required by substitution of '[01m[Ktemplate<class ... _Types> using _Move_ctor_alias = std::__detail::__variant::_Move_ctor_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_move_ctor, _Types ...> [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:546:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Copy_assign_base<false, std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:592:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Move_assign_base<false, std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:638:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Variant_base<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1026:11:[m[K   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/ext/aligned_buffer.h:91:28:[m[K   required from '[01m[Kstruct __gnu_cxx::__aligned_buffer<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:234:43:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node_value_base<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:265:12:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:2027:49:[m[K   required from '[01m[Kstruct std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:173:11:[m[K   required from '[01m[Kclass std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:105:18:[m[K   required from '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2860:25:[m[K [01;31m[Kerror: [m[K'[01m[Kvalue[m[K' is not a member of '[01m[Kstd::is_trivially_move_constructible<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
   inline constexpr bool [01;31m[Kis_trivially_move_constructible_v[m[K =
                         [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
/usr/arm-linux-gnueabihf/include/c++/8/type_traits: In instantiation of '[01m[Kstruct std::__is_trivially_copy_constructible_impl<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >, true>[m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1196:12:[m[K   required from '[01m[Kstruct std::is_trivially_copy_constructible<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2857:25:[m[K   required from '[01m[Kconstexpr const bool std::is_trivially_copy_constructible_v<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:315:5:[m[K   required from '[01m[Kconstexpr const bool std::__detail::__variant::_Traits<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >::_S_trivial_copy_ctor[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:489:70:[m[K   required by substitution of '[01m[Ktemplate<class ... _Types> using _Copy_ctor_alias = std::__detail::__variant::_Copy_ctor_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_copy_ctor, _Types ...> [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:492:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Move_ctor_base<false, std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:546:12:[m[K   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/ext/aligned_buffer.h:91:28:[m[K   required from '[01m[Kstruct __gnu_cxx::__aligned_buffer<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:234:43:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node_value_base<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:265:12:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:2027:49:[m[K   required from '[01m[Kstruct std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:173:11:[m[K   required from '[01m[Kclass std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:105:18:[m[K   required from '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1189:12:[m[K [01;31m[Kerror: [m[Kinvalid use of incomplete type '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
     struct [01;31m[K__is_trivially_copy_constructible_impl<_Tp, true>[m[K
            [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/unordered_map:47[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:16[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:102:11:[m[K [01;36m[Knote: [m[Kdeclaration of '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
     class [01;36m[Kunordered_map[m[K
           [01;36m[K^~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/move.h:55[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_pair.h:59[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_algobase.h:64[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/char_traits.h:39[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/string:40[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:15[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
/usr/arm-linux-gnueabihf/include/c++/8/type_traits: In instantiation of '[01m[Kconstexpr const bool std::is_trivially_copy_constructible_v<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:315:5:[m[K   required from '[01m[Kconstexpr const bool std::__detail::__variant::_Traits<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >::_S_trivial_copy_ctor[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:489:70:[m[K   required by substitution of '[01m[Ktemplate<class ... _Types> using _Copy_ctor_alias = std::__detail::__variant::_Copy_ctor_base<std::__detail::__variant::_Traits<_Types>::_S_trivial_copy_ctor, _Types ...> [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:492:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Move_ctor_base<false, std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:546:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Copy_assign_base<false, std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:592:12:[m[K   required from '[01m[Kstruct std::__detail::__variant::_Move_assign_base<false, std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:638:12:[m[K   [ skipping 9 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/ext/aligned_buffer.h:91:28:[m[K   required from '[01m[Kstruct __gnu_cxx::__aligned_buffer<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:234:43:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node_value_base<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:265:12:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:2027:49:[m[K   required from '[01m[Kstruct std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:173:11:[m[K   required from '[01m[Kclass std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:105:18:[m[K   required from '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2857:25:[m[K [01;31m[Kerror: [m[K'[01m[Kvalue[m[K' is not a member of '[01m[Kstd::is_trivially_copy_constructible<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
   inline constexpr bool [01;31m[Kis_trivially_copy_constructible_v[m[K =
                         [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
/usr/arm-linux-gnueabihf/include/c++/8/type_traits: In instantiation of '[01m[Kstruct std::is_literal_type<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2817:25:[m[K   required from '[01m[Kconstexpr const bool std::is_literal_type_v<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:355:30:[m[K   required from '[01m[Kunion std::__detail::__variant::_Variadic_union<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:356:33:[m[K   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1363:42:[m[K   required from '[01m[Kstruct std::__is_convertible_helper<const minjson::BasicValue<std::allocator<char> >&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >, false>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1369:12:[m[K   required from '[01m[Kstruct std::is_convertible<const minjson::BasicValue<std::allocator<char> >&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2912:25:[m[K   required from '[01m[Kconstexpr const bool std::is_convertible_v<const minjson::BasicValue<std::allocator<char> >&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >[m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:77:76:[m[K   required by substitution of '[01m[Ktemplate<class T, typename std::enable_if<((! is_same_v<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type, minjson::BasicValue<std::allocator<char> > >) && is_convertible_v<T&&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >), int>::type <anonymous> > minjson::BasicValue<std::allocator<char> >::BasicValue(T&&) [with T = const minjson::BasicValue<std::allocator<char> >&; typename std::enable_if<((! is_same_v<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type, minjson::BasicValue<std::allocator<char> > >) && is_convertible_v<T&&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >), int>::type <anonymous> = <missing>][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_pair.h:208:12:[m[K   required from '[01m[Kstruct std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/ext/aligned_buffer.h:91:28:[m[K   required from '[01m[Kstruct __gnu_cxx::__aligned_buffer<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:234:43:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node_value_base<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:265:12:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:2027:49:[m[K   required from '[01m[Kstruct std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:173:11:[m[K   required from '[01m[Kclass std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:105:18:[m[K   required from '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:686:12:[m[K [01;31m[Kerror: [m[Kinvalid use of incomplete type '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
     struct [01;31m[Kis_literal_type[m[K
            [01;31m[K^~~~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/unordered_map:47[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:16[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:102:11:[m[K [01;36m[Knote: [m[Kdeclaration of '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
     class [01;36m[Kunordered_map[m[K
           [01;36m[K^~~~~~~~~~~~~[m[K
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/move.h:55[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_pair.h:59[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_algobase.h:64[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/char_traits.h:39[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/string:40[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:15[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
/usr/arm-linux-gnueabihf/include/c++/8/type_traits: In instantiation of '[01m[Kconstexpr const bool std::is_literal_type_v<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:355:30:[m[K   required from '[01m[Kunion std::__detail::__variant::_Variadic_union<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:356:33:[m[K   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1363:42:[m[K   required from '[01m[Kstruct std::__is_convertible_helper<const minjson::BasicValue<std::allocator<char> >&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >, false>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:1369:12:[m[K   required from '[01m[Kstruct std::is_convertible<const minjson::BasicValue<std::allocator<char> >&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2912:25:[m[K   required from '[01m[Kconstexpr const bool std::is_convertible_v<const minjson::BasicValue<std::allocator<char> >&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >[m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:77:76:[m[K   required by substitution of '[01m[Ktemplate<class T, typename std::enable_if<((! is_same_v<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type, minjson::BasicValue<std::allocator<char> > >) && is_convertible_v<T&&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >), int>::type <anonymous> > minjson::BasicValue<std::allocator<char> >::BasicValue(T&&) [with T = const minjson::BasicValue<std::allocator<char> >&; typename std::enable_if<((! is_same_v<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type, minjson::BasicValue<std::allocator<char> > >) && is_convertible_v<T&&, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >), int>::type <anonymous> = <missing>][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_pair.h:208:12:[m[K   required from '[01m[Kstruct std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/ext/aligned_buffer.h:91:28:[m[K   required from '[01m[Kstruct __gnu_cxx::__aligned_buffer<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:234:43:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node_value_base<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:265:12:[m[K   required from '[01m[Kstruct std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true>[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable_policy.h:2027:49:[m[K   required from '[01m[Kstruct std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, true> > >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:173:11:[m[K   required from '[01m[Kclass std::_Hashtable<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char> >, std::hash<std::__cxx11::basic_string<char> >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >[m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/unordered_map.h:105:18:[m[K   required from '[01m[Kclass std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >[m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/type_traits:2817:25:[m[K [01;31m[Kerror: [m[K'[01m[Kvalue[m[K' is not a member of '[01m[Kstd::is_literal_type<std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > > >[m[K'
   inline constexpr bool [01;31m[Kis_literal_type_v[m[K = is_literal_type<_Tp>::value;
                         [01;31m[K^~~~~~~~~~~~~~~~~[m[K
In file included from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
./lib/minijsoncpp/minijsoncpp.h: In instantiation of '[01m[Kminjson::BasicValue<Allocator>::Workaround::~Workaround() [with Allocator = std::allocator<char>][m[K':
[01m[K./lib/minijsoncpp/minijsoncpp.h:60:10:[m[K   required from here
[01m[K./lib/minijsoncpp/minijsoncpp.h:198:44:[m[K [01;31m[Kerror: [m[Kstatic assertion failed
         static_assert([01;31m[Ksizeof(DummyVariant) == sizeof(Variant)[m[K);
                       [01;31m[K~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~[m[K
./lib/minijsoncpp/minijsoncpp.h: In instantiation of '[01m[Kminjson::BasicValue<Allocator>::Workaround::Workaround(minjson::BasicValue<Allocator>::Workaround&&) [with Allocator = std::allocator<char>][m[K':
[01m[K./lib/minijsoncpp/minijsoncpp.h:60:10:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::parse(std::string_view, const minjson::ParsingOptions&, minjson::ParsingMode, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:29:45:[m[K   required from here
[01m[K./lib/minijsoncpp/minijsoncpp.h:191:9:[m[K [01;31m[Kerror: [m[Kuse of deleted function '[01m[Kstd::variant<_Types>::variant(std::variant<_Types>&&) [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
         [01;31m[K::new(&storage) Variant{ std::move(other.operator Variant & ()) }[m[K;
         [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K./lib/minijsoncpp/minijsoncpp.h:9[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1082:7:[m[K [01;36m[Knote: [m[K'[01m[Kstd::variant<_Types>::variant(std::variant<_Types>&&) [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K' is implicitly deleted because the default definition would be ill-formed:
       [01;36m[Kvariant[m[K(variant&&) = default;
       [01;36m[K^~~~~~~[m[K
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1082:7:[m[K [01;31m[Kerror: [m[Kuse of deleted function '[01m[Kconstexpr std::_Enable_copy_move<false, false, false, false, _Tag>::_Enable_copy_move(std::_Enable_copy_move<false, false, false, false, _Tag>&&) [with _Tag = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/optional:43[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/node_handle.h:39[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:37[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/unordered_map:46[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:16[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/enable_special_members.h:302:15:[m[K [01;36m[Knote: [m[Kdeclared here
     constexpr [01;36m[K_Enable_copy_move[m[K(_Enable_copy_move&&) noexcept       = delete;
               [01;36m[K^~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K./lib/minijsoncpp/minijsoncpp.h:9[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
/usr/arm-linux-gnueabihf/include/c++/8/variant: In instantiation of '[01m[Kconstexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<0>, _Union&&) [with _Union = std::__detail::__variant::_Variadic_union<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >&][m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:227:30:[m[K   recursively required from '[01m[Kconstexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with unsigned int _Np = 5; _Union = std::__detail::__variant::_Variadic_union<bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >&][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:227:30:[m[K   required from '[01m[Kconstexpr decltype(auto) std::__detail::__variant::__get(std::in_place_index_t<_Idx>, _Union&&) [with unsigned int _Np = 6; _Union = std::__detail::__variant::_Variadic_union<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >&][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:235:30:[m[K   required from '[01m[Kconstexpr decltype(auto) std::__detail::__variant::__get(_Variant&&) [with unsigned int _Np = 6; _Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >&][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1335:45:[m[K   required from '[01m[Kconstexpr std::variant_alternative_t<_Np, std::variant<_Types ...> >& std::get(std::variant<_Types ...>&) [with unsigned int _Np = 6; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}; std::variant_alternative_t<_Np, std::variant<_Types ...> > = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:886:73:[m[K   required from '[01m[Kconstexpr _Tp& std::get(std::variant<_Types ...>&) [with _Tp = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:110:65:[m[K   required from '[01m[Kminjson::BasicValue<Allocator>::Object& minjson::BasicValue<Allocator>::asObject() & [with Allocator = std::allocator<char>; minjson::BasicValue<Allocator>::Object = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >; typename std::allocator_traits<_Alloc>::rebind_alloc<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, typename std::allocator_traits<_Alloc>::rebind_alloc<char> >, minjson::BasicValue<Allocator> > > = std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >; typename std::allocator_traits<_Alloc>::rebind_alloc<char> = std::allocator<char>][m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:222:40:[m[K [01;31m[Kerror: [m[K'[01m[Kunion std::__detail::__variant::_Variadic_union<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >[m[K' has no member named '[01m[K_M_first[m[K'; did you mean '[01m[K_M_rest[m[K'?
     { return [01;31m[Kstd::forward<_Union>(__u)._M_first[m[K._M_get(); }
              [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
              [32m[K_M_rest[m[K
/usr/arm-linux-gnueabihf/include/c++/8/variant: In instantiation of '[01m[Kconstexpr std::variant_alternative_t<_Np, std::variant<_Types ...> >& std::get(std::variant<_Types ...>&) [with unsigned int _Np = 6; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}; std::variant_alternative_t<_Np, std::variant<_Types ...> > = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >][m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:886:73:[m[K   required from '[01m[Kconstexpr _Tp& std::get(std::variant<_Types ...>&) [with _Tp = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:110:65:[m[K   required from '[01m[Kminjson::BasicValue<Allocator>::Object& minjson::BasicValue<Allocator>::asObject() & [with Allocator = std::allocator<char>; minjson::BasicValue<Allocator>::Object = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >; typename std::allocator_traits<_Alloc>::rebind_alloc<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, typename std::allocator_traits<_Alloc>::rebind_alloc<char> >, minjson::BasicValue<Allocator> > > = std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > >; typename std::allocator_traits<_Alloc>::rebind_alloc<char> = std::allocator<char>][m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:34:60:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1335:45:[m[K [01;31m[Kerror: [m[Kinvalid initialization of non-const reference of type '[01m[Kstd::variant_alternative_t<6, std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > > >&[m[K' {aka '[01m[Kstd::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >&[m[K'} from an rvalue of type '[01m[Kvoid[m[K'
       return [01;31m[K__detail::__variant::__get<_Np>(__v)[m[K;
              [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~[m[K
In file included from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
./lib/minijsoncpp/minijsoncpp.h: In instantiation of '[01m[Kauto& minjson::BasicValue<Allocator>::Workaround::operator=(minjson::BasicValue<Allocator>::Workaround&&) [with Allocator = std::allocator<char>][m[K':
[01m[K./lib/minijsoncpp/minijsoncpp.h:60:10:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseArray(minjson::detail::ParserImpl<Allocator>::Variant&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1049:26:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseImpl(minjson::detail::ParserImpl<Allocator>::Variant&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1037:63:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parse(minjson::detail::ParserImpl<Allocator>::Value&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Value = minjson::BasicValue<std::allocator<char> >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1468:50:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::impl::parse(std::string_view, const minjson::ParsingOptions&, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1485:66:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::parse(std::string_view, const minjson::ParsingOptions&, minjson::ParsingMode, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:29:45:[m[K   required from here
[01m[K./lib/minijsoncpp/minijsoncpp.h:204:38:[m[K [01;31m[Kerror: [m[Kuse of deleted function '[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
         return operator Variant & () = std::move(other.operator Variant & ());
In file included from [01m[K./lib/minijsoncpp/minijsoncpp.h:9[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1084:16:[m[K [01;36m[Knote: [m[K'[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K' is implicitly deleted because the default definition would be ill-formed:
       variant& [01;36m[Koperator[m[K=(variant&&) = default;
                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1084:16:[m[K [01;31m[Kerror: [m[Kuse of deleted function '[01m[Kstd::_Enable_copy_move<false, false, false, false, _Tag>& std::_Enable_copy_move<false, false, false, false, _Tag>::operator=(std::_Enable_copy_move<false, false, false, false, _Tag>&&) [with _Tag = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/optional:43[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/node_handle.h:39[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:37[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/unordered_map:46[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:16[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/enable_special_members.h:306:5:[m[K [01;36m[Knote: [m[Kdeclared here
     [01;36m[Koperator[m[K=(_Enable_copy_move&&) noexcept                         = delete;
     [01;36m[K^~~~~~~~[m[K
In file included from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
./lib/minijsoncpp/minijsoncpp.h: In instantiation of '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseArray(minjson::detail::ParserImpl<Allocator>::Variant&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K':
[01m[K./lib/minijsoncpp/minijsoncpp.h:1049:26:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseImpl(minjson::detail::ParserImpl<Allocator>::Variant&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1037:63:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parse(minjson::detail::ParserImpl<Allocator>::Value&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Value = minjson::BasicValue<std::allocator<char> >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1468:50:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::impl::parse(std::string_view, const minjson::ParsingOptions&, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1485:66:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::parse(std::string_view, const minjson::ParsingOptions&, minjson::ParsingMode, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:29:45:[m[K   required from here
[01m[K./lib/minijsoncpp/minijsoncpp.h:60:10:[m[K [01;31m[Kerror: [m[Kuse of '[01m[Kauto& minjson::BasicValue<Allocator>::Workaround::operator=(minjson::BasicValue<Allocator>::Workaround&&) [with Allocator = std::allocator<char>][m[K' before deduction of '[01m[Kauto[m[K'
   struct [01;31m[KBasicValue[m[K {
          [01;31m[K^~~~~~~~~~[m[K
[01m[K./lib/minijsoncpp/minijsoncpp.h:1201:16:[m[K [01;36m[Knote: [m[Ksynthesized method '[01m[Kminjson::BasicValue<std::allocator<char> >& minjson::BasicValue<std::allocator<char> >::operator=(minjson::BasicValue<std::allocator<char> >&&)[m[K' first required here
           [01;36m[Ka[0] = std::move(u)[m[K;
           [01;36m[K~~~~~^~~~~~~~~~~~~~[m[K
In file included from [01m[K./lib/minijsoncpp/minijsoncpp.h:9[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
/usr/arm-linux-gnueabihf/include/c++/8/variant: In instantiation of '[01m[Kconstexpr std::__detail::__variant::_Variadic_union<_First, _Rest ...>::_Variadic_union(std::in_place_index_t<0>, _Args&& ...) [with _Args = {std::allocator<char>&}; _First = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >; _Rest = {}][m[K':
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:352:65:[m[K   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:381:14:[m[K   required from '[01m[Kconstexpr std::__detail::__variant::_Variant_storage<false, _Types ...>::_Variant_storage(std::in_place_index_t<_Np>, _Args&& ...) [with unsigned int _Np = 6; _Args = {std::allocator<char>&}; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:461:20:[m[K   required from '[01m[Kconstexpr std::__detail::__variant::_Variant_base<_Types>::_Variant_base(std::in_place_index_t<_Np>, _Args&& ...) [with unsigned int _Np = 6; _Args = {std::allocator<char>&}; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1125:57:[m[K   required from '[01m[Kconstexpr std::variant<_Types>::variant(std::in_place_index_t<_Np>, _Args&& ...) [with unsigned int _Np = 6; _Args = {std::allocator<char>&}; <template-parameter-2-3> = void; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1191:8:[m[K   required from '[01m[Kstd::enable_if_t<is_constructible_v<typename std::variant_alternative<_Np, std::variant<_Types> >::type, _Args ...>, typename std::variant_alternative<_Np, std::variant<_Types> >::type&> std::variant<_Types>::emplace(_Args&& ...) [with unsigned int _Np = 6; _Args = {std::allocator<char>&}; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}; std::enable_if_t<is_constructible_v<typename std::variant_alternative<_Np, std::variant<_Types> >::type, _Args ...>, typename std::variant_alternative<_Np, std::variant<_Types> >::type&> = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >&][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1161:10:[m[K   required from '[01m[Kstd::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> std::variant<_Types>::emplace(_Args&& ...) [with _Tp = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >; _Args = {std::allocator<char>&}; _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}; std::enable_if_t<(is_constructible_v<_Tp, _Args ...> && __exactly_once<_Tp>), _Tp&> = std::unordered_map<std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char> >, std::equal_to<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, minjson::BasicValue<std::allocator<char> > > > >&][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1251:15:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseObject(minjson::detail::ParserImpl<Allocator>::Variant&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1050:26:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseImpl(minjson::detail::ParserImpl<Allocator>::Variant&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1037:63:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parse(minjson::detail::ParserImpl<Allocator>::Value&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Value = minjson::BasicValue<std::allocator<char> >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1468:50:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::impl::parse(std::string_view, const minjson::ParsingOptions&, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1485:66:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::parse(std::string_view, const minjson::ParsingOptions&, minjson::ParsingMode, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:29:45:[m[K   required from here
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:347:62:[m[K [01;31m[Kerror: [m[Kusing invalid field '[01m[Kstd::__detail::__variant::_Variadic_union<_First, _Rest ...>::_M_first[m[K'
  : _M_first(in_place_index<0>, std::forward<_Args>(__args)...[01;31m[K)[m[K
                                                              [01;31m[K^[m[K
In file included from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
./lib/minijsoncpp/minijsoncpp.h: In instantiation of '[01m[Kminjson::BasicValue<Allocator>::Workaround::Workaround(const minjson::BasicValue<Allocator>::Workaround&) [with Allocator = std::allocator<char>][m[K':
[01m[K./lib/minijsoncpp/minijsoncpp.h:60:10:[m[K   required from '[01m[Kvoid std::_Construct(_T1*, _Args&& ...) [with _T1 = minjson::BasicValue<std::allocator<char> >; _Args = {const minjson::BasicValue<std::allocator<char> >&}][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_uninitialized.h:83:18:[m[K   required from '[01m[Kstatic _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const minjson::BasicValue<std::allocator<char> >*; _ForwardIterator = minjson::BasicValue<std::allocator<char> >*; bool _TrivialValueTypes = false][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_uninitialized.h:134:15:[m[K   required from '[01m[K_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const minjson::BasicValue<std::allocator<char> >*; _ForwardIterator = minjson::BasicValue<std::allocator<char> >*][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_uninitialized.h:289:37:[m[K   required from '[01m[K_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const minjson::BasicValue<std::allocator<char> >*; _ForwardIterator = minjson::BasicValue<std::allocator<char> >*; _Tp = minjson::BasicValue<std::allocator<char> >][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/stl_uninitialized.h:311:2:[m[K   required from '[01m[K_ForwardIterator std::__uninitialized_move_if_noexcept_a(_InputIterator, _InputIterator, _ForwardIterator, _Allocator&) [with _InputIterator = minjson::BasicValue<std::allocator<char> >*; _ForwardIterator = minjson::BasicValue<std::allocator<char> >*; _Allocator = std::allocator<minjson::BasicValue<std::allocator<char> > >][m[K'
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/vector.tcc:611:44:[m[K   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
[01m[K./lib/minijsoncpp/minijsoncpp.h:1200:56:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseArray(minjson::detail::ParserImpl<Allocator>::Variant&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1049:26:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parseImpl(minjson::detail::ParserImpl<Allocator>::Variant&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Variant = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1037:63:[m[K   required from '[01m[Kbool minjson::detail::ParserImpl<Allocator>::parse(minjson::detail::ParserImpl<Allocator>::Value&) [with Allocator = std::allocator<char>; minjson::detail::ParserImpl<Allocator>::Value = minjson::BasicValue<std::allocator<char> >][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1468:50:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::impl::parse(std::string_view, const minjson::ParsingOptions&, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[K./lib/minijsoncpp/minijsoncpp.h:1485:66:[m[K   required from '[01m[Kminjson::BasicParsingResult<Allocator> minjson::parse(std::string_view, const minjson::ParsingOptions&, minjson::ParsingMode, const Allocator&) [with Allocator = std::allocator<char>; std::string_view = std::basic_string_view<char>][m[K'
[01m[Klib/sdl2wrapper/Localization.cpp:29:45:[m[K   required from here
[01m[K./lib/minijsoncpp/minijsoncpp.h:189:45:[m[K [01;31m[Kerror: [m[Kuse of deleted function '[01m[Kstd::variant<_Types>::variant(const std::variant<_Types>&) [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K'
       Workaround(const Workaround &other) { [01;31m[K::new(&storage) Variant{ other.operator const Variant & () }[m[K; }
                                             [01;31m[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K./lib/minijsoncpp/minijsoncpp.h:9[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:2[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1081:7:[m[K [01;36m[Knote: [m[K'[01m[Kstd::variant<_Types>::variant(const std::variant<_Types>&) [with _Types = {std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > >}][m[K' is implicitly deleted because the default definition would be ill-formed:
       [01;36m[Kvariant[m[K(const variant& __rhs) = default;
       [01;36m[K^~~~~~~[m[K
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/variant:1081:7:[m[K [01;31m[Kerror: [m[Kuse of deleted function '[01m[Kconstexpr std::_Enable_copy_move<false, false, false, false, _Tag>::_Enable_copy_move(const std::_Enable_copy_move<false, false, false, false, _Tag>&) [with _Tag = std::variant<std::monostate, bool, long long int, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<minjson::BasicValue<std::allocator<char> >, std::allocator<minjson::BasicValue<std::allocator<char> > > >, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, minjson::BasicValue<std::allocator<char> > > > > >][m[K'
In file included from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/optional:43[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/node_handle.h:39[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/hashtable.h:37[m[K,
                 from [01m[K/usr/arm-linux-gnueabihf/include/c++/8/unordered_map:46[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.h:16[m[K,
                 from [01m[Klib/sdl2wrapper/Localization.cpp:1[m[K:
[01m[K/usr/arm-linux-gnueabihf/include/c++/8/bits/enable_special_members.h:301:15:[m[K [01;36m[Knote: [m[Kdeclared here
     constexpr [01;36m[K_Enable_copy_move[m[K(_Enable_copy_move const&) noexcept  = delete;
               [01;36m[K^~~~~~~~~~~~~~~~~[m[K
make: *** [Makefile:136: miyooa30] Error 1
Total reclaimed space: 0B
